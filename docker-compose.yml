version: '3.8'

services:
  spark-master:
    image: apache/spark:v3.4.0
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master -h 0.0.0.0
    ports:
      - "7077:7077"
      - "8082:8080"

  spark-worker-1:
    image: apache/spark:v3.4.0
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - "SPARK_WORKER_MEMORY=1g"
      - "SPARK_WORKER_CORES=1"
    depends_on:
      - spark-master
    volumes:
      - ./spark-worker-1-work:/opt/spark/work

  spark-worker-2:
    image: apache/spark:v3.4.0
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    environment:
      - "SPARK_WORKER_MEMORY=1g"
      - "SPARK_WORKER_CORES=1"
    depends_on:
      - spark-master
    volumes:
      - ./spark-worker-2-work:/opt/spark/work

  redis:
    image: redis:7.0.11
    container_name: redis
    ports:
      - "6379:6379"

  cassandra:
    image: cassandra:4.1.1
    container_name: cassandra
    ports:
      - "9042:9042"
    volumes:
      - ./suppression-service:/docker-entrypoint-initdb.d/
    environment:
      - CASSANDRA_CLUSTER_NAME=MyCassandraCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CQLSH_INIT_FILE=/docker-entrypoint-initdb.d/init.cql

  cassandra-init:
    image: cassandra:4.1.1
    container_name: cassandra-init
    depends_on:
      - cassandra
    volumes:
      - ./suppression-service:/suppression-service
    command: /bin/bash -c 'for i in `seq 1 60`; do cqlsh cassandra -e "describe cluster" && break || sleep 5; done && cqlsh cassandra -f /suppression-service/init.cql'

  blueprints_mongodb:
    image: mongo
    container_name: blueprints_mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: blueprints_db
    volumes:
      - ./blueprint-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  metadata_mongodb:
    image: mongo
    container_name: metadata_mongodb
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: metadata_db
    volumes:
      - ./metadata-extraction-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js

  restoration_mongodb:
    image: mongo
    container_name: restoration_mongodb
    restart: always
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: restorations_db
    volumes:
      - ./database-restoration-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  worksheet_mongodb:
    image: mongo
    container_name: worksheet_mongodb
    restart: always
    ports:
      - "27020:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: worksheets_db
    volumes:
      - ./worksheet-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  anonymization_mongodb:
    image: mongo
    container_name: anonymization_mongodb
    restart: always
    ports:
      - "27021:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: anonymization_db
    volumes:
      - ./anonymization-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  outcomes_mongodb:
    image: mongo
    container_name: outcomes_mongodb
    restart: always
    ports:
      - "27022:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: outcomes_db
    volumes:
      - ./outcome-service/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: 'kafka'
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    container_name: kafka-ui
    ports:
      - '8081:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    restart: always
