version: '3.8'

services:
  blueprint-service:
    image: openjdk:17-jdk-slim
    volumes:
      - ./builds/blueprint-service-simulation-6.jar:/app.jar
    command: java -jar app.jar
    ports:
      - "8100:8100"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    networks:
      - platform

  database-restoration-service:
    build:
      context: ../../database-restoration-service/
      dockerfile: Dockerfile
    ports:
      - "8200:8200"
    environment:
      - PGPASSWORD=postgres
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
    networks:
      - platform

  metadata-extraction-service:
    build:
      context: ../../metadata-extraction-service/
      dockerfile: Dockerfile
    ports:
      - "8300:8300"
    networks:
      - platform

  api-gateway:
    build:
      context: ../../api-gateway/
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - platform

  importing-dashboard:
    build: ../../importing-dashboard/
    ports:
      - "80:80"
    volumes:
      - node-modules:/app/node_modules
    networks:
      - platform

  eureka-server:
    build:
      context: ../../eureka-server/
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - platform

  postgres:
    image: postgres:13.13
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - platform

  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./../../mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - platform

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=YES
    networks:
      - platform

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - platform

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    container_name: kafka-ui
    ports:
      - '8081:8080'
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - platform

  elasticsearch:
    image: elasticsearch:8.11.3
    platform: linux/arm64
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - platform

  logstash:
    image: logstash:8.11.3
    platform: linux/arm64
    container_name: logstash
    ports:
      - "5001:5001"
    volumes:
      - ./../../logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./../../logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - platform

  kibana:
    image: kibana:8.11.3
    platform: linux/arm64
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - platform

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./../../prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - '9090:9090'
    networks:
      - platform

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - ./../../datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana-data:/var/lib/grafana
    networks:
      - platform

volumes:
  elasticsearch-data:
  grafana-data:
  postgres-data:
  node-modules:

networks:
  platform:
    name: platform_network
    driver: bridge